# docker-compose.qdrant.yml
# Qdrant vector database for knowledge base and semantic search

version: '3.8'

services:
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ai-productivity-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"  # gRPC port
    volumes:
      - qdrant_storage:/qdrant/storage
      - ./qdrant_config.yaml:/qdrant/config/production.yaml
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/readyz"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Optional: Qdrant Web UI for debugging
  qdrant-ui:
    image: qdrant/qdrant-web-ui:latest
    container_name: ai-productivity-qdrant-ui
    ports:
      - "6335:80"
    environment:
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      - qdrant
    networks:
      - app-network

volumes:
  qdrant_storage:
    driver: local

networks:
  app-network:
    external: true
    name: ai-productivity-network


# qdrant_config.yaml
# Qdrant configuration file
service:
  host: 0.0.0.0
  http_port: 6333
  grpc_port: 6334
  max_request_size_mb: 32
  enable_cors: true

storage:
  storage_path: /qdrant/storage
  snapshots_path: /qdrant/snapshots
  on_disk_payload: false
  performance:
    max_search_threads: 0  # Use all available CPU cores

cluster:
  enabled: false

telemetry:
  anonymized_telemetry: false
