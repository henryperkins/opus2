services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-productivity-backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend/app:/app/app
      - ./backend/alembic:/app/alembic
      - ./backend/tests:/app/tests
      - ./backend_data:/data
      - ./backend/requirements.txt:/app/requirements.txt
      - ./backend/alembic.ini:/app/alembic.ini
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - RENDER_SERVICE_URL=http://render-svc:8001
    # Wait until the database (health-checked) is ready before the backend
    # attempts the first connection.  Redis and the render service only need
    # to be started (no explicit health-check).
    depends_on:
      redis:
        condition: service_started
      render-svc:
        condition: service_started
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: ai-productivity-redis
    command: ["redis-server", "--save", ""]   # no RDB dump for dev speed
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    restart: unless-stopped
    networks:
      - app-network

  # Optional: Qdrant vector database
  # Uncomment to use Qdrant instead of SQLite VSS
  # qdrant:
  #   image: qdrant/qdrant:v1.7.4
  #   container_name: ai-productivity-qdrant
  #   ports:
  #     - "6333:6333"  # HTTP API
  #   volumes:
  #     - ./qdrant_storage:/qdrant/storage
  #   environment:
  #     - QDRANT__SERVICE__HTTP_PORT=6333
  #   restart: unless-stopped
  #   networks:
  #     - app-network

  render-svc:
    build:
      context: ./render-svc
      dockerfile: Dockerfile
    container_name: ai-productivity-render-svc
    ports:
      - "8001:8001"
    environment:
      - PORT=8001
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-productivity-frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/vite.config.js:/app/vite.config.js
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DOCKER_ENV=true
      # Frontend (inside container) must talk to backend service via its Docker
      # network alias "backend" rather than localhost.
      # For production deployment, set VITE_API_URL to https://yourdomain.com/api
      - VITE_API_URL=${VITE_API_URL:-http://backend:8000}
    networks:
      - app-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
